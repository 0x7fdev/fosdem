///
/// @Generated by Mockolo
///



import CoreLocation
import Foundation
import GRDB
import MapKit
import UIKit
@testable import Fosdem
#if DEBUG
import UIKit
#endif


final class AcknowledgementsServiceBundleMock: AcknowledgementsServiceBundle {
    init() { }


    private(set) var urlCallCount = 0
    var urlArgValues = [(String?, String?)]()
    var urlHandler: ((String?, String?) -> (URL?))?
    func url(forResource name: String?, withExtension ext: String?) -> URL? {
        urlCallCount += 1
        urlArgValues.append((name, ext))
        if let urlHandler = urlHandler {
            return urlHandler(name, ext)
        }
        return nil
    }
}

final class BundleServiceBundleMock: BundleServiceBundle {
    init() { }


    private(set) var urlCallCount = 0
    var urlArgValues = [(String?, String?)]()
    var urlHandler: ((String?, String?) -> (URL?))?
    func url(forResource name: String?, withExtension ext: String?) -> URL? {
        urlCallCount += 1
        urlArgValues.append((name, ext))
        if let urlHandler = urlHandler {
            return urlHandler(name, ext)
        }
        return nil
    }
}

final class FavoritesServiceDefaultsMock: FavoritesServiceDefaults {
    init() { }


    private(set) var valueCallCount = 0
    var valueArgValues = [String]()
    var valueHandler: ((String) -> (Any?))?
    func value(forKey key: String) -> Any? {
        valueCallCount += 1
        valueArgValues.append(key)
        if let valueHandler = valueHandler {
            return valueHandler(key)
        }
        return nil
    }

    private(set) var setCallCount = 0
    var setArgValues = [(Any?, String)]()
    var setHandler: ((Any?, String) -> ())?
    func set(_ value: Any?, forKey defaultName: String)  {
        setCallCount += 1
        setArgValues.append((value, defaultName))
        if let setHandler = setHandler {
            setHandler(value, defaultName)
        }
        
    }
}

final class LiveServiceTimerMock: LiveServiceTimer {
    init() { }


    private(set) var invalidateCallCount = 0
    var invalidateHandler: (() -> ())?
    func invalidate()  {
        invalidateCallCount += 1
        if let invalidateHandler = invalidateHandler {
            invalidateHandler()
        }
        
    }
}

final class PreloadServiceFileMock: PreloadServiceFile {
    init() { }


    private(set) var fileExistsCallCount = 0
    var fileExistsArgValues = [String]()
    var fileExistsHandler: ((String) -> (Bool))?
    func fileExists(atPath path: String) -> Bool {
        fileExistsCallCount += 1
        fileExistsArgValues.append(path)
        if let fileExistsHandler = fileExistsHandler {
            return fileExistsHandler(path)
        }
        return false
    }

    private(set) var copyItemCallCount = 0
    var copyItemArgValues = [(String, String)]()
    var copyItemHandler: ((String, String) throws -> ())?
    func copyItem(atPath srcPath: String, toPath dstPath: String) throws  {
        copyItemCallCount += 1
        copyItemArgValues.append((srcPath, dstPath))
        if let copyItemHandler = copyItemHandler {
            try copyItemHandler(srcPath, dstPath)
        }
        
    }

    private(set) var urlCallCount = 0
    var urlArgValues = [(FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask, URL?, Bool)]()
    var urlHandler: ((FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask, URL?, Bool) throws -> (URL))?
    func url(for directory: FileManager.SearchPathDirectory, in domain: FileManager.SearchPathDomainMask, appropriateFor url: URL?, create shouldCreate: Bool) throws -> URL {
        urlCallCount += 1
        urlArgValues.append((directory, domain, url, shouldCreate))
        if let urlHandler = urlHandler {
            return try urlHandler(directory, domain, url, shouldCreate)
        }
        return URL(fileURLWithPath: "")
    }

    private(set) var removeItemCallCount = 0
    var removeItemArgValues = [String]()
    var removeItemHandler: ((String) throws -> ())?
    func removeItem(atPath path: String) throws  {
        removeItemCallCount += 1
        removeItemArgValues.append(path)
        if let removeItemHandler = removeItemHandler {
            try removeItemHandler(path)
        }
        
    }
}

final class ScheduleServiceDefaultsMock: ScheduleServiceDefaults {
    init() { }


    private(set) var valueCallCount = 0
    var valueArgValues = [String]()
    var valueHandler: ((String) -> (Any?))?
    func value(forKey key: String) -> Any? {
        valueCallCount += 1
        valueArgValues.append(key)
        if let valueHandler = valueHandler {
            return valueHandler(key)
        }
        return nil
    }

    private(set) var setCallCount = 0
    var setArgValues = [(Any?, String)]()
    var setHandler: ((Any?, String) -> ())?
    func set(_ value: Any?, forKey defaultName: String)  {
        setCallCount += 1
        setArgValues.append((value, defaultName))
        if let setHandler = setHandler {
            setHandler(value, defaultName)
        }
        
    }
}

final class UpdateServiceNetworkMock: UpdateServiceNetwork {
    init() { }


    private(set) var performCallCount = 0
    var performArgValues = [AppStoreSearchRequest]()
    var performHandler: ((AppStoreSearchRequest, @escaping (Result<AppStoreSearchResponse, Error>) -> Void) -> (NetworkServiceTask))?
    func perform(_ request: AppStoreSearchRequest, completion: @escaping (Result<AppStoreSearchResponse, Error>) -> Void) -> NetworkServiceTask {
        performCallCount += 1
        performArgValues.append(request)
        if let performHandler = performHandler {
            return performHandler(request, completion)
        }
        return NetworkServiceTaskMock()
    }
}

final class LiveServiceProviderMock: LiveServiceProvider {
    init() { }


    private(set) var scheduledTimerCallCount = 0
    var scheduledTimerArgValues = [(TimeInterval, Bool)]()
    var scheduledTimerHandler: ((TimeInterval, Bool, @escaping (LiveServiceTimer) -> Void) -> (LiveServiceTimer))?
    func scheduledTimer(withTimeInterval interval: TimeInterval, repeats: Bool, block: @escaping (LiveServiceTimer) -> Void) -> LiveServiceTimer {
        scheduledTimerCallCount += 1
        scheduledTimerArgValues.append((interval, repeats))
        if let scheduledTimerHandler = scheduledTimerHandler {
            return scheduledTimerHandler(interval, repeats, block)
        }
        return LiveServiceTimerMock()
    }
}

final class PlaybackServiceDefaultsMock: PlaybackServiceDefaults {
    init() { }


    private(set) var valueCallCount = 0
    var valueArgValues = [String]()
    var valueHandler: ((String) -> (Any?))?
    func value(forKey key: String) -> Any? {
        valueCallCount += 1
        valueArgValues.append(key)
        if let valueHandler = valueHandler {
            return valueHandler(key)
        }
        return nil
    }

    private(set) var setCallCount = 0
    var setArgValues = [(Any?, String)]()
    var setHandler: ((Any?, String) -> ())?
    func set(_ value: Any?, forKey defaultName: String)  {
        setCallCount += 1
        setArgValues.append((value, defaultName))
        if let setHandler = setHandler {
            setHandler(value, defaultName)
        }
        
    }
}

final class BundleServiceDataProviderMock: BundleServiceDataProvider {
    init() { }


    private(set) var dataCallCount = 0
    var dataArgValues = [URL]()
    var dataHandler: ((URL) throws -> (Data))?
    func data(withContentsOf url: URL) throws -> Data {
        dataCallCount += 1
        dataArgValues.append(url)
        if let dataHandler = dataHandler {
            return try dataHandler(url)
        }
        fatalError("dataHandler returns can't have a default value thus its handler must be set")
    }
}

final class AcknowledgementsServiceDataProviderMock: AcknowledgementsServiceDataProvider {
    init() { }


    private(set) var dataCallCount = 0
    var dataArgValues = [URL]()
    var dataHandler: ((URL) throws -> (Data))?
    func data(withContentsOf url: URL) throws -> Data {
        dataCallCount += 1
        dataArgValues.append(url)
        if let dataHandler = dataHandler {
            return try dataHandler(url)
        }
        fatalError("dataHandler returns can't have a default value thus its handler must be set")
    }
}

final class ScheduleServiceNetworkMock: ScheduleServiceNetwork {
    init() { }


    private(set) var performCallCount = 0
    var performArgValues = [ScheduleRequest]()
    var performHandler: ((ScheduleRequest, @escaping (Result<Schedule, Error>) -> Void) -> (NetworkServiceTask))?
    func perform(_ request: ScheduleRequest, completion: @escaping (Result<Schedule, Error>) -> Void) -> NetworkServiceTask {
        performCallCount += 1
        performArgValues.append(request)
        if let performHandler = performHandler {
            return performHandler(request, completion)
        }
        return NetworkServiceTaskMock()
    }
}

final class UpdateServiceBundleMock: UpdateServiceBundle {
    init() { }
    init(bundleIdentifier: String? = nil, bundleShortVersion: String? = nil) {
        self.bundleIdentifier = bundleIdentifier
        self.bundleShortVersion = bundleShortVersion
    }


    private(set) var bundleIdentifierSetCallCount = 0
    var bundleIdentifier: String? = nil { didSet { bundleIdentifierSetCallCount += 1 } }

    private(set) var bundleShortVersionSetCallCount = 0
    var bundleShortVersion: String? = nil { didSet { bundleShortVersionSetCallCount += 1 } }
}

final class NetworkServiceTaskMock: NetworkServiceTask {
    init() { }


    private(set) var resumeCallCount = 0
    var resumeHandler: (() -> ())?
    func resume()  {
        resumeCallCount += 1
        if let resumeHandler = resumeHandler {
            resumeHandler()
        }
        
    }
}

final class NetworkServiceSessionMock: NetworkServiceSession {
    init() { }


    private(set) var dataTaskCallCount = 0
    var dataTaskArgValues = [URLRequest]()
    var dataTaskHandler: ((URLRequest, @escaping (Data?, URLResponse?, Error?) -> Void) -> (NetworkServiceTask))?
    func dataTask(with request: URLRequest, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> NetworkServiceTask {
        dataTaskCallCount += 1
        dataTaskArgValues.append(request)
        if let dataTaskHandler = dataTaskHandler {
            return dataTaskHandler(request, completionHandler)
        }
        return NetworkServiceTaskMock()
    }
}

final class ScheduleServicePersistenceMock: ScheduleServicePersistence {
    init() { }


    private(set) var performWriteCallCount = 0
    var performWriteArgValues = [PersistenceServiceWrite]()
    var performWriteHandler: ((PersistenceServiceWrite, @escaping (Error?) -> Void) -> ())?
    func performWrite(_ write: PersistenceServiceWrite, completion: @escaping (Error?) -> Void)  {
        performWriteCallCount += 1
        performWriteArgValues.append(write)
        if let performWriteHandler = performWriteHandler {
            performWriteHandler(write, completion)
        }
        
    }
}

final class PreloadServiceBundleMock: PreloadServiceBundle {
    init() { }


    private(set) var pathCallCount = 0
    var pathArgValues = [(String?, String?)]()
    var pathHandler: ((String?, String?) -> (String?))?
    func path(forResource name: String?, ofType ext: String?) -> String? {
        pathCallCount += 1
        pathArgValues.append((name, ext))
        if let pathHandler = pathHandler {
            return pathHandler(name, ext)
        }
        return nil
    }
}

